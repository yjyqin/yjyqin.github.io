---
layout: post
title:  "与Java的不同之处"
date:   2016-05-09 11:15:42 +0800
---
_这篇文章是官网文章的简单翻译 - [Differences with Java](http://groovy-lang.org/differences.html)_

Groovy的设计原则是对Java程序员尽可能友好，一个Java程序员写起Groovy代码的时候，感觉越自然越好。
显然，从我自己的经历看，Groovy显然已经做到的这一点。


#### 1. Default imports

这些最常用的Java packages都已经被默认导入，尤其在写groovy script的时候会非常方便。

 * java.io.*
 * java.lang.*
 * java.math.BigDecimal
 * java.math.BigInteger
 * java.net.*
 * groovy.lang.*
 * groovy.util.*

#### 2. Multi-methods

方法重载，简单的说就是方法同名不同参。
在Java中，参数的类型是在编译期就确定下来的，所以哪个方法会被调用在编译时就已经确定下来了。
而Groovy中，参数的类型是在运行期推导出来的，所以哪个方法被调用得看运行期的推导出来的参数类型。

这个例子很好的说明了Groovy和Java的区别。
Java中会打印2，因为参数类型是根据代码声明在编译期就确认了。
而Groovy则会打印1，因为在运行期做类型推导知道参数的实际类型是String,然后会以String类型来调用方法。

{% highlight java %}
int method(String arg) {
  return 1;
}

int method(Object arg) {
  return 2;
}

Object obj = "Object";
System.out.println(method(obj));
{% endhighlight %}

#### 3. Array initializers

由于Groovy中的花括号__{ }__是专门用于声明Closure的，所以针对数组初始化必须用方括号来替代：

{% highlight groovy %}
int[] array = [1, 2, 3]
{% endhighlight %}

#### 4. Package scope visibility

Groovy跟Java一样，如果不知道修饰符就是默认包可见，或者直接使用标注@PackageScope

{% highlight groovy %}
class Person {
  @PackageScope String name
}

class Person {
  String name   // 其实Groovy自动为name生成了Getter/Setter方法
}
{% endhighlight %}

#### 5. ARM blocks

ARM - Automatic Resource Management

这是Java7中引入的新特性，可以隐式关闭各种i/o资源，无须写一堆close。 

> 这个特性我完全不知道，所以特意google了一下，发现几个有趣的链接
>
> * Joshua Bloch 最早关于这个特性的讨论贴 [Proposal: Automatic Resource Management](http://mail.openjdk.java.net/pipermail/coin-dev/2009-February/000011.html)
>
> * Oracle官方的介绍 [Better Resource Management with Java SE 7: Beyond Syntactic Sugar](http://www.oracle.com/technetwork/articles/java/trywithresources-401775.html)

{% highlight java %}
Path file = new Path("/var/tmp/test.log")
Charset charset = Charset.forName("UTF-8")
try (BufferedReader reader = Files.newBufferedReader(file, charset)) {
  String line;
  while ((line = reader.readLine()) != null) {
    System.out.println(line);
  }
} catch (IOException ex) {
  ex.printStackTrace();
}

// 这种写法的好处就是无论如何, File/Reader都会被自动释放
{% endhighlight %}

回到Groovy中，这其实根本就不是一个问题。Groovy对于`java.io.File`类的扩展，已经自动支持I/O资源的释放了。

{% highlight groovy %}
new File('/var/tmp/test.log').eachLine('UTF-8') {
  println it
}
{% endhighlight %}

#### 6. Inner Classes

Groovy中内部类的实现看上去更想是创建Closure，好坏参半。
比如说，内部类访问私有属性或者方法会有问题，但是本地变量却又不需要声明成final型

##### 6.1 Static Inner Classes

如果你真的需要使用内部类，请声明成静态的

{% highlight groovy %}
class A {
  static class B {}
}

new A.B()
{% endhighlight %}

##### 6.2 Anonymous Inner Classes

{% highlight groovy %}
import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit

CountDownLatch called = new CountDownLatch(1)

Timer timer = new Timer()
timer.schedule(new TimerTask() {
  void run() {
    called.countDown()
  }
}, 0)

assert called.await(10, TimeUnit.SECONDS)
{% endhighlight %}

##### 6.3  Creating Instances of Non-Static Inner Classes

{% highlight java %}
// Java way
public class Y {
  public class X {}
  public X foo() {
    return new X();
  }
  
  public static X createX(Y y) {
    return y.new X();
  }
}
{% endhighlight %}

{% highlight groovy %}
// "y.new X()" is not supported in Groovy, so you have to do in groovy way
public class Y {
  public class X {}
  public X foo() {
    return new X()
  }
  
  public static X create(Y y) {
    return new X(y)
  }
}
{% endhighlight %}

#### 7. Lambdas

这个特性有太多介绍的文章，groovy不支持lambda的语法，但是可以用Closure实现同样的功能

#### 8. GString

双引号生命的字符串其实是Gstring类型，支持字符串内插

#### 9. String and Character literals

因为单引号被Groovy用来声明`java.lang.String`, 所以默认情况下单引号声明的单个字符其实是个字符串

{% highlight groovy %}
assert 'c'.getClass() == String
{% endhighlight %}

只有在显式声明成char类型，groovy才会将单引号字符串转型为字符型

{% highlight groovy %}
char ch = 'a'
assert Character.digit(ch, 16) == 10
{% endhighlight %}

#### 10. Primitives and wrappers

Java中的基本类型，如int, double, long等等，Groovy都会自动包装成相应的类，这点在作为参数调用时要尤其注意

{% highlight groovy %}
int i
m(i)

void m(long i) {
  println "am long"
} // 在Java中，会调用这个方法

void m(Integer i) {
  println "am Integer"
} // 在Groovy中，会调用这个方法
{% endhighlight %}

#### 11. Behaviour of `==`

Java中的`==`意味着两个对象在物理上完全一样，而Groovy中的`==`会被转换成`a.compareTo(b) == 0`，
这就意味着，一旦a和b都实现了`java.lang.Comparable`，并且`a.equals(b)`，在Groovy中就是`==`的。

#### 12. Conversions

这个主要针对boolean/short/char/int...这些基础类型，Groovy因为提供了自动包装`(autowrapper)`所以会略复杂一些

#### 13. Extra Keywords

Groovy中添加了几个关键字

* `as`
* `def`
* `in`
* `trait`