---
layout: post
title:  "Groovy - GDK介绍"
date:   2016-05-11 00:16:42 +0800
category: Groovy
---
### 写在前面

_本文是对官网文章的简单翻译 - [The Groovy Development Kit](http://groovy-lang.org/groovy-dev-kit.html)_

### Working with IO

个人感觉Groovy对于IO部分的增强, 简直让程序员爽歪歪了

关于IO, 以下几个类是必须了解和掌握的, 推荐阅读GDK中扩展的JavaDoc

* [`java.io.File`](http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/File.html)
* [`java.io.InputStream`](http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/InputStream.html)
* [`java.io.OutputStream`](http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/OutputStream.html)
* [`java.io.Reader`](http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/Reader.html)
* [`java.io.Writer`](http://docs.groovy-lang.org/latest/html/groovy-jdk/java/io/Writer.html)
* [`java.nio.file.Path`](http://docs.groovy-lang.org/latest/html/groovy-jdk/java/nio/file/Path.html)

#### 1.1 Reading files

{% highlight groovy %}
new File(baseDir,  'access.log').eachLine { line,  lineNo ->
    println "${lineNo}: ${line}"
}
{% endhighlight %}

这个例子中, 如果eachLine出现任何异常, groovy都会确保文件资源被关闭, 类似ARM的功能.
不过老实讲, 这个例子根本不能体现`java.io.File`被Groovy扩展到了何种地步, 例如文件遍历

> * eachByte
> * eachDir,  eachDirMatch,  eachDirRecurse
> * eachFile,  eachFileMatch,  eachFileRecurse
> * eachLine
> * eachObject

下面是将文件按行读入到一个字符串列表中去

{% highlight groovy %}
def lines1 = new File(baseDir,  'access.log').collect { it }

def lines2 = new File(baseDir,  'access.log') as String[]
{% endhighlight %}

如果你想文件读入到一个byte[]中去, 

{% highlight groovy %}
byte[] content = new File(baseDir,  'access.dat').bytes
{% endhighlight %}

有时候你只是想得到一个`InputStream`

{% highlight groovy %}
def ins = new File(baseDir,  'access.dat').newInputStream()
...
ins.close()
{% endhighlight %}

其实, 你不需要显式的关闭`InputStream`

{% highlight groovy %}
new File(baseDir,  'access.dat').withInputStream { stream ->
  ...
}
{% endhighlight %}

#### 1.2 Writing files

利用`Writer`来写入文件

{% highlight groovy %}
new File(baseDir,  'access.dat').withWriter('utf-8') { writer ->
    writer.writeLine 'a frog jumps'
}
{% endhighlight %}

或者利用`<<`更简单的实现

{% highlight groovy %}
new File(baseDir,  'access.dat') << 'a frog jumps'
{% endhighlight %}

#### 1.3 Traversing file trees

什么都不说了, 直接上代码比较直观

{% highlight groovy %}
dir.eachFile { file ->
  println file.name
}

dir.eachFileMatch(~/.*\.txt/) { file ->
  println file.length
}

dir.eachFileRecurse { file ->
  println file.name
}

dir.eachFileRecurse(FileTypes.FILES) { file ->
  println file.length
}
{% endhighlight %}

如果想对遍历过程作更多的自定义操作, 可以使用`traverse`方法

{% highlight groovy %}
dir.traverse { file ->
  if (file.directory && file.name == 'bin') {
    FileVisitResult.TERMINATE
  } else {
    FileVisitResult.CONTINUE
  }
}

{% endhighlight %}

#### 1.4 Data and objects

Java中经常需要使用`java.io.InputStream`和`java.io.OutputStream`来做对象序列化和反序列化, 在groovy中可以很方便的使用`Input/OutputStream`

{% highlight groovy %}
String message = "hello world"

// serialize
file.withDataOutputStream { out ->
  out.writeBoolean(Boolean.TRUE)
  out.writeUTF(message)
}

// deserialize
file.withDataInputStream { in ->
  assert in.readUTF() == message
}
{% endhighlight %}

如果需要序列化的对象已经实现了`java.io.Serializable`

{% highlight groovy %}
Person p = new Person(name: 'Jason',  age: 37)

file.withDataOutputStream { out ->
  out.writeObject(p)
}

file.withDataInputStream { in ->
  def p2 = in.readObject()
  assert p2.name == p.name
  assert p2.age == p.age
}

{% endhighlight %}

#### 1.5 Executing external processes

Java中想启动一个进程去执行某个命令的话, 真是一堆的繁琐, 而Groovy仅仅需要一行代码就可以了.

{% highlight groovy %}
def proc = "hostname; date".execute()
println proc.text
{% endhighlight %}

或者对输出按行处理一下

{% highlight groovy %}
def proc = "hostname; date".execute()
proc.in.eachLine { line ->
  println line
}
{% endhighlight %}

不过呢, 这里需要注意一下：`in`实际上对应着STDOUT, 而`out`才是对应着STDIN, 可以把这个proc对象认为是成sub-process的下一个管道(pipe) 

另外, 许多命令也许并不能如同built-in一样直接执行, 需要特别处理一下.

{% highlight groovy %}
// windows
def proc = "cmd /c dir".execute()
{% endhighlight %}

在某些平台上(具体哪个，我也不知)，由于为STDIN和STDOUT分配的buffer size不够大，
快速的写入到STDIN或者从STDOUT读取的时候，可能会造成运行命令的sub-process被锁住，甚至死锁。
基于这个原因，Groovy提供了额外的帮助方法来简化stream的处理。

这个例子说明怎么样得到全部的命令行输出(STDOUT & STDERR):

{% highlight groovy %}
def proc = "rm -f too.tmp".execute([], tmpDir)
proc.consumeProcessOutput()
proc.waitFor()
{% endhighlight %}

如果是命令行，那么pipe就不能不提。

{% highlight groovy %}
// ls | tr -d o | tr -d e | tr -d i
proc1 = 'ls'.execute()
proc2 = 'tr -d o'.execute()
proc3 = 'tr -d e'.execute()
proc4 = 'tr -d i'.execute()

proc1 | proc2 | proc3 | proc4
proc4.waitFor()

if (proc4.exitValue()) {
  println proc4.err.text
} else {
  println proc4.text
}
{% endhighlight %}

处理错误信息

{% highlight groovy %}
def sout = new StringBuilder()
def serr = new StringBuilder()

proc2 = 'tr -d o'.execute()
proc3 = 'tr -d e'.execute()
proc4 = 'tr -d i'.execute()
proc4.consumeProcessOutput(sout, serr)

proc2 | proc3 | proc4

[proc2, proc3].each { it.consumeProcessErrorStream(serr) }

proc2.withWriter { writer ->
  writer << 'testfile.groovy'
}

proc4.waitForOrKill(1000)

println "STDOUT: ${sout}"
println "STDERR: ${serr}"
{% endhighlight %}

### Working with collections

Java本身的集合类框架已经设计得非常成熟了，但你会发现Groovy中提供了更多更丰富的功能，而且很多都在Java8被官方采纳。

#### Lists

一些基本用法

{% highlight groovy %}
/* --- define a list --- */
def list1 = []   // empty list
def list2 = [5, 6, 7, 8]

/* --- an implementation of `java.util.List` --- */
def list3 = ['a', 'b', 'c']
def list4 = new ArrayList<String>(list3)

assert list3 == list4

def list5 = list3.clone()
assert list5 == list3

/* --- index --- */
def list6 = [5, 6, 7, 8]

assert list6.size() == 4
assert list6.getClass() == ArrayList
assert list6[2] == 7
assert list6.get(2) == 7

list6[2] = 9
assert list6 == [5, 6, 9, 8,]   // trailing comma OK

list6.putAt(2, 10)
assert list6 == [5, 6, 10, 8]

assert list6.set(2, 11) == 10
assert list6 == [5, 6, 11, 8]

assert list6.get(-2) == 11    // nagative indices

/* --- as boolean --- */
assert ![]    // empty list is false

/* --- iterating --- */
[1, 2, 3].each { println "item: $it" }

[1, 2, 3].eachWithIndex { it, i -> println "item[$i]: $it" }
{% endhighlight %}

来一些高级点的用法，按照现在流行的话说，函数式风格

{% highlight groovy %}
/* --- filtering and searching --- */
assert [1, 2, 3].find { it > 1 } == 2
assert [1, 2, 3].findAll { it > 1 } == [2, 3]


assert ['a', 'b', 'c', 'd', 'c'].findIndexOf { it in ['c', 'e', 'g'] } == 2
assert ['a', 'b', 'c', 'd', 'c'].indexOf('c') == 2
assert ['a', 'b', 'c', 'd', 'c'].indexOf('z') == -1
assert ['a', 'b', 'c', 'd', 'c'].lastIndexOf('c') == 4


assert [1, 2, 3].every { it < 5 }
assert [1, 2, 3].any { it < 5 }


assert [1, 2, 3, 4, 5, 6].sum() == 21
assert ['a', 'b', 'c', 'd', 'e'].sum {
  it == 'a' ? 1 : it == 'b' ? 2 : it == 'c' ? 3 : it == 'd' ? 4 : it == 'e' ? 5 : 0
} == 15
assert ['a', 'b', 'c', 'd', 'e'].sum() == 'abcde'
assert [['a', 'b'], ['c', 'd']].sum() == ['a', 'b', 'c', 'd']
assert [].sum(1000) == 1000   // an initial value can be provided
assert [1, 2, 3].sum(1000) == 1006


assert [1, 2, 3].join('-') == '1-2-3'
assert [1, 2, 3].inject('counting: ') {
  str, item -> str + item
} == 'counting: 123'
assert [1, 2, 3].inject(0) { count, item -> count + item } == 6


assert [9, 4, 2, 10, 5].max() == 10
assert [9, 4, 2, 10, 5].min() == 2
assert ['x', 'y', 'a', 'z'].max() == 'z'    // any thing comparable
assert ['abc', 'z', 'xyzuvw', 'hello', '321'].max { it.size() } == 'xyzuvw'

Comparator mc1 = { a, b -> a == b ? 0 : (a < b ? -1 : 1) }
assert [7, 4, 9, -2, 11, -13].max(mc1) == 11

Comparator mc2 = { a, b -> a == b ? 0 : (Math.abs(a) < Math.abs(b) ? -1 : 1) }
assert [assert [7, 4, 9, -2, 11, -13].max(mc2) == 13
{% endhighlight %}

`<<`可以用来append, 非常简洁好用

{% highlight groovy %}
def list = []

list << 5
assert list == [5]

list << ['m', 'o']
assert list == [5, ['m', 'o']]

assert ([1, 2] << 3 << [4, 5] << 6) == [1, 2, 3, [4, 5], 6]

assert ([1, 2, 3] << 4) == ([1, 2, 3].leftShift(4))

assert [1, 2] + 3 + [4, 5] + 6 == [1, 2, 3, 4, 5, 6]
assert [1, 2].plus(3).plus([4, 5]).plus(6) == [1, 2, 3, 4, 5, 6]

assert [1, *[222, 333], 456] == [1, 222, 333, 456]
assert [*[1, 2, 3]] == [1, 2, 3]
{% endhighlight %}